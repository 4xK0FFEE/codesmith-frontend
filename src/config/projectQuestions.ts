import { QuestionConfig, InputType } from "@/types/project";

export const PROJECT_TYPES = {
  FRONTEND: "frontend",
  BACKEND: "backend",
  FULLSTACK: "fullstack",
  CLI: "cli",
  MOBILE: "mobile",
  AI_ML: "ai-ml",
  GAME_DEV: "game-dev",
  DEVOPS: "devops",
} as const;

export const projectQuestions: Record<string, QuestionConfig[]> = {
  [PROJECT_TYPES.FRONTEND]: [
    {
      id: "framework",
      label: "Framework",
      type: InputType.SELECT,
      options: [
        { value: "react", label: "React" },
        { value: "next", label: "Next.js" },
        { value: "vue", label: "Vue.js" },
        { value: "nuxt", label: "Nuxt.js" },
        { value: "svelte", label: "Svelte" },
        { value: "angular", label: "Angular" },
      ],
      required: true,
    },
    {
      id: "language",
      label: "Language",
      type: InputType.SELECT,
      options: [
        { value: "typescript", label: "TypeScript" },
        { value: "javascript", label: "JavaScript" },
      ],
      required: true,
    },
    {
      id: "styling",
      label: "Styling Solution",
      type: InputType.SELECT,
      options: [
        { value: "tailwind", label: "Tailwind CSS" },
        { value: "scss", label: "SCSS" },
        { value: "css-modules", label: "CSS Modules" },
        { value: "styled-components", label: "Styled Components" },
        { value: "bootstrap", label: "Bootstrap" },
      ],
      required: true,
    },
    {
      id: "stateManagement",
      label: "State Management",
      type: InputType.SELECT,
      options: [
        { value: "none", label: "None" },
        { value: "redux", label: "Redux" },
        { value: "zustand", label: "Zustand" },
        { value: "recoil", label: "Recoil" },
        { value: "jotai", label: "Jotai" },
      ],
      required: true,
    },
    {
      id: "authentication",
      label: "Authentication",
      type: InputType.CHECKBOX,
      description: "Include authentication setup",
      required: false,
    },
    {
      id: "testing",
      label: "Testing Framework",
      type: InputType.SELECT,
      options: [
        { value: "jest", label: "Jest" },
        { value: "vitest", label: "Vitest" },
        { value: "testing-library", label: "React Testing Library" },
        { value: "cypress", label: "Cypress" },
        { value: "none", label: "None" },
      ],
      required: true,
    },
    {
      id: "projectName",
      label: "Project Name",
      type: InputType.TEXT,
      pattern: "^[a-z0-9-_]+$",
      patternError:
        "Only lowercase letters, numbers, hyphens, and underscores allowed",
      required: true,
    },
    {
      id: "packageManager",
      label: "Package Manager",
      type: InputType.SELECT,
      options: [
        { value: "npm", label: "npm" },
        { value: "yarn", label: "Yarn" },
        { value: "pnpm", label: "pnpm" },
        { value: "bun", label: "Bun" },
      ],
      required: true,
    },
    {
      id: "routing",
      label: "Routing Solution",
      type: InputType.SELECT,
      options: [
        { value: "react-router", label: "React Router" },
        { value: "tanstack-router", label: "TanStack Router" },
        { value: "wouter", label: "Wouter" },
        { value: "none", label: "None" },
      ],
      required: true,
    },
    {
      id: "uiLibrary",
      label: "UI Component Library",
      type: InputType.SELECT,
      options: [
        { value: "none", label: "None" },
        { value: "mui", label: "Material-UI" },
        { value: "chakra", label: "Chakra UI" },
        { value: "shadcn", label: "shadcn/ui" },
        { value: "antd", label: "Ant Design" },
      ],
      required: true,
    },
    {
      id: "formHandling",
      label: "Form Handling",
      type: InputType.SELECT,
      options: [
        { value: "none", label: "None" },
        { value: "react-hook-form", label: "React Hook Form" },
        { value: "formik", label: "Formik" },
        { value: "react-final-form", label: "React Final Form" },
      ],
      required: true,
    },
    {
      id: "analytics",
      label: "Analytics",
      type: InputType.SELECT,
      options: [
        { value: "none", label: "None" },
        { value: "ga4", label: "Google Analytics 4" },
        { value: "plausible", label: "Plausible" },
        { value: "umami", label: "Umami" },
      ],
      required: false,
    },
    {
      id: "seo",
      label: "SEO Setup",
      type: InputType.CHECKBOX,
      description: "Include SEO configuration (meta tags, sitemap, robots.txt)",
      required: false,
    },
    {
      id: "i18n",
      label: "Internationalization",
      type: InputType.CHECKBOX,
      description: "Include i18n setup",
      required: false,
    },
    {
      id: "pwa",
      label: "Progressive Web App",
      type: InputType.CHECKBOX,
      description: "Include PWA configuration",
      required: false,
    },
  ],

  [PROJECT_TYPES.BACKEND]: [
    {
      id: "language",
      label: "Language",
      type: InputType.SELECT,
      options: [
        { value: "nodejs", label: "Node.js" },
        { value: "python", label: "Python" },
        { value: "go", label: "Go" },
        { value: "rust", label: "Rust" },
        { value: "java", label: "Java" },
      ],
      required: true,
    },
    {
      id: "framework",
      label: "Framework",
      type: InputType.SELECT,
      options: [
        { value: "express", label: "Express.js" },
        { value: "nest", label: "NestJS" },
        { value: "fastify", label: "Fastify" },
        { value: "flask", label: "Flask" },
        { value: "fastapi", label: "FastAPI" },
        { value: "spring", label: "Spring Boot" },
      ],
      required: true,
    },
    {
      id: "database",
      label: "Database",
      type: InputType.SELECT,
      options: [
        { value: "postgresql", label: "PostgreSQL" },
        { value: "mongodb", label: "MongoDB" },
        { value: "mysql", label: "MySQL" },
        { value: "redis", label: "Redis" },
        { value: "none", label: "None" },
      ],
      required: true,
    },
    {
      id: "orm",
      label: "ORM / Query Builder",
      type: InputType.SELECT,
      options: [
        { value: "prisma", label: "Prisma" },
        { value: "typeorm", label: "TypeORM" },
        { value: "mongoose", label: "Mongoose" },
        { value: "sequelize", label: "Sequelize" },
        { value: "none", label: "None" },
      ],
      required: true,
    },
    {
      id: "docker",
      label: "Docker Support",
      type: InputType.CHECKBOX,
      description: "Include Dockerfile and docker-compose.yml",
      required: false,
    },
    {
      id: "projectName",
      label: "Project Name",
      type: InputType.TEXT,
      pattern: "^[a-z0-9-_]+$",
      patternError:
        "Only lowercase letters, numbers, hyphens, and underscores allowed",
      required: true,
    },
    {
      id: "apiSpec",
      label: "API Specification",
      type: InputType.SELECT,
      options: [
        { value: "rest", label: "REST" },
        { value: "graphql", label: "GraphQL" },
        { value: "grpc", label: "gRPC" },
        { value: "ws", label: "WebSocket" },
      ],
      required: true,
    },
    {
      id: "caching",
      label: "Caching Solution",
      type: InputType.SELECT,
      options: [
        { value: "none", label: "None" },
        { value: "redis", label: "Redis" },
        { value: "memcached", label: "Memcached" },
      ],
      required: false,
    },
    {
      id: "authentication",
      label: "Authentication Method",
      type: InputType.SELECT,
      options: [
        { value: "jwt", label: "JWT" },
        { value: "session", label: "Session-based" },
        { value: "oauth", label: "OAuth 2.0" },
        { value: "none", label: "None" },
      ],
      required: true,
    },
    {
      id: "messaging",
      label: "Message Queue",
      type: InputType.SELECT,
      options: [
        { value: "none", label: "None" },
        { value: "rabbitmq", label: "RabbitMQ" },
        { value: "kafka", label: "Apache Kafka" },
        { value: "redis", label: "Redis Pub/Sub" },
      ],
      required: false,
    },
    {
      id: "monitoring",
      label: "Monitoring Solution",
      type: InputType.SELECT,
      options: [
        { value: "none", label: "None" },
        { value: "prometheus", label: "Prometheus + Grafana" },
        { value: "datadog", label: "Datadog" },
        { value: "newrelic", label: "New Relic" },
      ],
      required: false,
    },
    {
      id: "testing",
      label: "Testing Framework",
      type: InputType.SELECT,
      options: [
        { value: "jest", label: "Jest" },
        { value: "mocha", label: "Mocha" },
        { value: "pytest", label: "pytest" },
        { value: "golang", label: "Go testing" },
      ],
      required: true,
    },
  ],

  [PROJECT_TYPES.FULLSTACK]: [
    {
      id: "projectName",
      label: "Project Name",
      type: InputType.TEXT,
      pattern: "^[a-z0-9-_]+$",
      patternError:
        "Only lowercase letters, numbers, hyphens, and underscores allowed",
      required: true,
    },
    {
      id: "frontendFramework",
      label: "Frontend Framework",
      type: InputType.SELECT,
      options: [
        { value: "next", label: "Next.js" },
        { value: "nuxt", label: "Nuxt.js" },
        { value: "remix", label: "Remix" },
        { value: "sveltekit", label: "SvelteKit" },
      ],
      required: true,
    },
    {
      id: "backendFramework",
      label: "Backend Framework",
      type: InputType.SELECT,
      options: [
        { value: "next-api", label: "Next.js API Routes" },
        { value: "express", label: "Express.js" },
        { value: "nest", label: "NestJS" },
        { value: "fastify", label: "Fastify" },
      ],
      required: true,
    },
    {
      id: "database",
      label: "Database",
      type: InputType.SELECT,
      options: [
        { value: "postgresql", label: "PostgreSQL" },
        { value: "mongodb", label: "MongoDB" },
        { value: "mysql", label: "MySQL" },
        { value: "sqlite", label: "SQLite" },
      ],
      required: true,
    },
    {
      id: "orm",
      label: "ORM / Query Builder",
      type: InputType.SELECT,
      options: [
        { value: "prisma", label: "Prisma" },
        { value: "drizzle", label: "Drizzle" },
        { value: "typeorm", label: "TypeORM" },
        { value: "mongoose", label: "Mongoose" },
      ],
      required: true,
    },
    {
      id: "authentication",
      label: "Authentication Provider",
      type: InputType.SELECT,
      options: [
        { value: "next-auth", label: "NextAuth.js" },
        { value: "clerk", label: "Clerk" },
        { value: "supabase", label: "Supabase Auth" },
        { value: "firebase", label: "Firebase Auth" },
        { value: "custom", label: "Custom Implementation" },
      ],
      required: true,
    },
    {
      id: "deployment",
      label: "Deployment Platform",
      type: InputType.SELECT,
      options: [
        { value: "vercel", label: "Vercel" },
        { value: "railway", label: "Railway" },
        { value: "netlify", label: "Netlify" },
        { value: "aws", label: "AWS" },
      ],
      required: true,
    },
  ],

  [PROJECT_TYPES.CLI]: [
    {
      id: "projectName",
      label: "Project Name",
      type: InputType.TEXT,
      pattern: "^[a-z0-9-_]+$",
      patternError:
        "Only lowercase letters, numbers, hyphens, and underscores allowed",
      required: true,
    },
    {
      id: "language",
      label: "Language",
      type: InputType.SELECT,
      options: [
        { value: "nodejs", label: "Node.js" },
        { value: "python", label: "Python" },
        { value: "go", label: "Go" },
        { value: "rust", label: "Rust" },
      ],
      required: true,
    },
    {
      id: "argumentParser",
      label: "Argument Parser",
      type: InputType.SELECT,
      options: [
        { value: "commander", label: "Commander.js" },
        { value: "yargs", label: "Yargs" },
        { value: "click", label: "Click (Python)" },
        { value: "cobra", label: "Cobra (Go)" },
        { value: "clap", label: "Clap (Rust)" },
      ],
      required: true,
    },
    {
      id: "interactive",
      label: "Interactive Interface",
      type: InputType.SELECT,
      options: [
        { value: "none", label: "None" },
        { value: "inquirer", label: "Inquirer.js" },
        { value: "prompts", label: "Prompts" },
        { value: "questionary", label: "Questionary (Python)" },
      ],
      required: false,
    },
    {
      id: "logging",
      label: "Logging Solution",
      type: InputType.SELECT,
      options: [
        { value: "simple", label: "Simple Console Logging" },
        { value: "winston", label: "Winston" },
        { value: "bunyan", label: "Bunyan" },
        { value: "loguru", label: "Loguru (Python)" },
      ],
      required: true,
    },
  ],

  [PROJECT_TYPES.MOBILE]: [
    {
      id: "projectName",
      label: "Project Name",
      type: InputType.TEXT,
      pattern: "^[a-z0-9-_]+$",
      patternError:
        "Only lowercase letters, numbers, hyphens, and underscores allowed",
      required: true,
    },
    {
      id: "framework",
      label: "Framework",
      type: InputType.SELECT,
      options: [
        { value: "react-native", label: "React Native" },
        { value: "flutter", label: "Flutter" },
        { value: "ionic", label: "Ionic" },
        { value: "kotlin", label: "Native Android (Kotlin)" },
        { value: "swift", label: "Native iOS (Swift)" },
      ],
      required: true,
    },
    {
      id: "stateManagement",
      label: "State Management",
      type: InputType.SELECT,
      options: [
        { value: "redux", label: "Redux" },
        { value: "mobx", label: "MobX" },
        { value: "riverpod", label: "Riverpod (Flutter)" },
        { value: "bloc", label: "BLoC (Flutter)" },
      ],
      required: true,
    },
    {
      id: "authentication",
      label: "Authentication",
      type: InputType.SELECT,
      options: [
        { value: "firebase", label: "Firebase Auth" },
        { value: "auth0", label: "Auth0" },
        { value: "amplify", label: "AWS Amplify" },
        { value: "supabase", label: "Supabase Auth" },
      ],
      required: true,
    },
    {
      id: "storage",
      label: "Local Storage",
      type: InputType.SELECT,
      options: [
        { value: "async-storage", label: "Async Storage" },
        { value: "realm", label: "Realm" },
        { value: "sqlite", label: "SQLite" },
        { value: "hive", label: "Hive (Flutter)" },
      ],
      required: true,
    },
    {
      id: "navigation",
      label: "Navigation Library",
      type: InputType.SELECT,
      options: [
        { value: "react-navigation", label: "React Navigation" },
        { value: "go-router", label: "Go Router (Flutter)" },
        { value: "ionic-router", label: "Ionic Router" },
      ],
      required: true,
    },
  ],

  [PROJECT_TYPES.AI_ML]: [
    {
      id: "projectName",
      label: "Project Name",
      type: InputType.TEXT,
      pattern: "^[a-z0-9-_]+$",
      patternError:
        "Only lowercase letters, numbers, hyphens, and underscores allowed",
      required: true,
    },
    {
      id: "framework",
      label: "ML Framework",
      type: InputType.SELECT,
      options: [
        { value: "tensorflow", label: "TensorFlow" },
        { value: "pytorch", label: "PyTorch" },
        { value: "scikit", label: "Scikit-learn" },
        { value: "jax", label: "JAX" },
      ],
      required: true,
    },
    {
      id: "projectType",
      label: "Project Type",
      type: InputType.SELECT,
      options: [
        { value: "classification", label: "Classification" },
        { value: "regression", label: "Regression" },
        { value: "nlp", label: "Natural Language Processing" },
        { value: "computer-vision", label: "Computer Vision" },
        { value: "reinforcement", label: "Reinforcement Learning" },
      ],
      required: true,
    },
    {
      id: "dataProcessing",
      label: "Data Processing Library",
      type: InputType.SELECT,
      options: [
        { value: "pandas", label: "Pandas" },
        { value: "dask", label: "Dask" },
        { value: "spark", label: "PySpark" },
        { value: "numpy", label: "NumPy" },
      ],
      required: true,
    },
    {
      id: "visualization",
      label: "Visualization Library",
      type: InputType.SELECT,
      options: [
        // ... (previous code remains the same until AI_ML visualization options)

        { value: "matplotlib", label: "Matplotlib" },
        { value: "plotly", label: "Plotly" },
        { value: "seaborn", label: "Seaborn" },
        { value: "bokeh", label: "Bokeh" },
      ],
      required: true,
    },
    {
      id: "modelTracking",
      label: "Model Tracking",
      type: InputType.SELECT,
      options: [
        { value: "mlflow", label: "MLflow" },
        { value: "wandb", label: "Weights & Biases" },
        { value: "tensorboard", label: "TensorBoard" },
        { value: "neptune", label: "Neptune.ai" },
      ],
      required: false,
    },
    {
      id: "deployment",
      label: "Model Deployment",
      type: InputType.SELECT,
      options: [
        { value: "flask", label: "Flask API" },
        { value: "fastapi", label: "FastAPI" },
        { value: "tensorflow-serving", label: "TensorFlow Serving" },
        { value: "torchserve", label: "TorchServe" },
      ],
      required: true,
    },
    {
      id: "gpuSupport",
      label: "GPU Support",
      type: InputType.CHECKBOX,
      description: "Include GPU acceleration setup",
      required: false,
    },
    {
      id: "experimentTracking",
      label: "Experiment Tracking",
      type: InputType.CHECKBOX,
      description: "Include experiment tracking setup",
      required: false,
    },
  ],

  [PROJECT_TYPES.GAME_DEV]: [
    {
      id: "projectName",
      label: "Project Name",
      type: InputType.TEXT,
      pattern: "^[a-z0-9-_]+$",
      patternError:
        "Only lowercase letters, numbers, hyphens, and underscores allowed",
      required: true,
    },
    {
      id: "engine",
      label: "Game Engine",
      type: InputType.SELECT,
      options: [
        { value: "unity", label: "Unity" },
        { value: "unreal", label: "Unreal Engine" },
        { value: "godot", label: "Godot" },
        { value: "phaser", label: "Phaser.js" },
        { value: "babylonjs", label: "Babylon.js" },
      ],
      required: true,
    },
    {
      id: "dimension",
      label: "Dimension",
      type: InputType.SELECT,
      options: [
        { value: "2d", label: "2D" },
        { value: "3d", label: "3D" },
        { value: "2.5d", label: "2.5D" },
      ],
      required: true,
    },
    {
      id: "genre",
      label: "Game Genre",
      type: InputType.SELECT,
      options: [
        { value: "action", label: "Action" },
        { value: "platformer", label: "Platformer" },
        { value: "rpg", label: "RPG" },
        { value: "strategy", label: "Strategy" },
        { value: "puzzle", label: "Puzzle" },
      ],
      required: true,
    },
    {
      id: "multiplayer",
      label: "Multiplayer Support",
      type: InputType.SELECT,
      options: [
        { value: "none", label: "Single Player Only" },
        { value: "local", label: "Local Multiplayer" },
        { value: "online", label: "Online Multiplayer" },
        { value: "both", label: "Both Local & Online" },
      ],
      required: true,
    },
    {
      id: "physics",
      label: "Physics Engine",
      type: InputType.SELECT,
      options: [
        { value: "built-in", label: "Built-in Physics" },
        { value: "box2d", label: "Box2D" },
        { value: "bullet", label: "Bullet Physics" },
        { value: "physx", label: "PhysX" },
      ],
      required: true,
    },
    {
      id: "assetManagement",
      label: "Asset Management",
      type: InputType.CHECKBOX,
      description: "Include asset management system setup",
      required: false,
    },
    {
      id: "saveSystem",
      label: "Save System",
      type: InputType.CHECKBOX,
      description: "Include save/load system setup",
      required: false,
    },
  ],

  [PROJECT_TYPES.DEVOPS]: [
    {
      id: "projectName",
      label: "Project Name",
      type: InputType.TEXT,
      pattern: "^[a-z0-9-_]+$",
      patternError:
        "Only lowercase letters, numbers, hyphens, and underscores allowed",
      required: true,
    },
    {
      id: "infrastructure",
      label: "Infrastructure as Code",
      type: InputType.SELECT,
      options: [
        { value: "terraform", label: "Terraform" },
        { value: "cloudformation", label: "AWS CloudFormation" },
        { value: "pulumi", label: "Pulumi" },
        { value: "bicep", label: "Azure Bicep" },
      ],
      required: true,
    },
    {
      id: "cloudProvider",
      label: "Cloud Provider",
      type: InputType.SELECT,
      options: [
        { value: "aws", label: "Amazon Web Services" },
        { value: "azure", label: "Microsoft Azure" },
        { value: "gcp", label: "Google Cloud Platform" },
        { value: "multi", label: "Multi-Cloud" },
      ],
      required: true,
    },
    {
      id: "containerization",
      label: "Containerization",
      type: InputType.SELECT,
      options: [
        { value: "docker", label: "Docker" },
        { value: "containerd", label: "containerd" },
        { value: "podman", label: "Podman" },
        { value: "none", label: "None" },
      ],
      required: true,
    },
    {
      id: "orchestration",
      label: "Container Orchestration",
      type: InputType.SELECT,
      options: [
        { value: "kubernetes", label: "Kubernetes" },
        { value: "ecs", label: "AWS ECS" },
        { value: "nomad", label: "HashiCorp Nomad" },
        { value: "none", label: "None" },
      ],
      required: true,
    },
    {
      id: "cicd",
      label: "CI/CD Platform",
      type: InputType.SELECT,
      options: [
        { value: "github-actions", label: "GitHub Actions" },
        { value: "gitlab-ci", label: "GitLab CI" },
        { value: "jenkins", label: "Jenkins" },
        { value: "azure-devops", label: "Azure DevOps" },
      ],
      required: true,
    },
    {
      id: "monitoring",
      label: "Monitoring Stack",
      type: InputType.SELECT,
      options: [
        { value: "prometheus-grafana", label: "Prometheus + Grafana" },
        { value: "elk", label: "ELK Stack" },
        { value: "datadog", label: "Datadog" },
        { value: "newrelic", label: "New Relic" },
      ],
      required: true,
    },
    {
      id: "security",
      label: "Security Tools",
      type: InputType.SELECT,
      options: [
        { value: "vault", label: "HashiCorp Vault" },
        { value: "snyk", label: "Snyk" },
        { value: "trivy", label: "Trivy" },
        { value: "none", label: "None" },
      ],
      required: false,
    },
    {
      id: "serviceDiscovery",
      label: "Service Discovery",
      type: InputType.SELECT,
      options: [
        { value: "consul", label: "HashiCorp Consul" },
        { value: "etcd", label: "etcd" },
        { value: "eureka", label: "Netflix Eureka" },
        { value: "none", label: "None" },
      ],
      required: false,
    },
    {
      id: "backup",
      label: "Backup Strategy",
      type: InputType.CHECKBOX,
      description: "Include backup and disaster recovery setup",
      required: false,
    },
    {
      id: "compliance",
      label: "Compliance Checks",
      type: InputType.CHECKBOX,
      description: "Include compliance and policy as code setup",
      required: false,
    },
  ],
};
