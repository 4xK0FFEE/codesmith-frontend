import { QuestionConfig, InputType } from "@/types/project";
import {
  FaAcquisitionsIncorporated,
  FaAws,
  FaBrain,
  FaDocker,
  FaDraft2Digital,
  FaExternalLinkSquareAlt,
  FaFlask,
  FaGithub,
  FaGitlab,
  FaHive,
  FaJava,
  FaJenkins,
  FaMemory,
  FaNodeJs,
  FaPuzzlePiece,
  FaReact,
  FaRegAddressBook,
  FaRust,
  FaSwift,
  FaSync,
  FaUnity,
  FaWeight,
  FaWpforms,
} from "react-icons/fa";
import { RiGpsFill } from "react-icons/ri";
import { GoDot, GoSingleSelect } from "react-icons/go";
import { VscAzure, VscAzureDevops } from "react-icons/vsc";
import {
  BiBookHeart,
  BiCommand,
  BiInfoSquare,
  BiLogoFlutter,
} from "react-icons/bi";
import {
  TbBrandPython,
  TbBrandReactNative,
  TbLanguage,
  TbPhysotherapist,
  TbPrompt,
} from "react-icons/tb";
import {
  SiAngular,
  SiAntdesign,
  SiApachekafka,
  SiArcgis,
  SiAuth0,
  SiAwsamplify,
  SiAwsorganizations,
  SiBabylondotjs,
  SiBootstrap,
  SiBun,
  SiChakraui,
  SiClerk,
  SiCodeblocks,
  SiContainerd,
  SiCssmodules,
  SiCypress,
  SiDask,
  SiDatadog,
  SiDrizzle,
  SiEtcd,
  SiExpress,
  SiFastapi,
  SiFastify,
  SiFirebase,
  SiFlask,
  SiFormik,
  SiGo,
  SiGoogleanalytics,
  SiGooglecloud,
  SiGraphql,
  SiHashicorp,
  SiIonic,
  SiJavascript,
  SiJest,
  SiKotlin,
  SiKubernetes,
  SiLocal,
  SiMaterialdesign,
  SiMetabase,
  SiMetasploit,
  SiMicrostrategy,
  SiMlflow,
  SiMobx,
  SiMocha,
  SiMongodb,
  SiMongoose,
  SiMysql,
  SiNeptune,
  SiNestjs,
  SiNetflix,
  SiNetlify,
  SiNewrelic,
  SiNextdotjs,
  SiNodedotjs,
  SiNpm,
  SiNumpy,
  SiNuxtdotjs,
  SiPandas,
  SiPlausibleanalytics,
  SiPlotly,
  SiPnpm,
  SiPodman,
  SiPostgresql,
  SiPrisma,
  SiPrometheus,
  SiPulumi,
  SiPysyft,
  SiPytest,
  SiPython,
  SiPytorch,
  SiRabbitmq,
  SiRailway,
  SiReact,
  SiReacthookform,
  SiReactquery,
  SiReactrouter,
  SiRealm,
  SiRecoil,
  SiRedis,
  SiRedux,
  SiRemix,
  SiRust,
  SiScikitlearn,
  SiSequelize,
  SiSession,
  SiShadcnui,
  SiSimplelogin,
  SiSnyk,
  SiSpringboot,
  SiSqlite,
  SiStyledcomponents,
  SiSupabase,
  SiSvelte,
  SiTailwindcss,
  SiTensorflow,
  SiTerraform,
  SiTrivy,
  SiTypeorm,
  SiTypescript,
  SiUmami,
  SiUnrealengine,
  SiVercel,
  SiVitest,
  SiVuedotjs,
  SiWebauthn,
  SiYarn,
} from "react-icons/si";
import {
  BsBadge3dFill,
  BsBox2,
  BsBuildingExclamation,
  BsCloudArrowUp,
  BsFiletypeScss,
  BsMicrosoft,
  BsRouter,
} from "react-icons/bs";
import {
  MdBookOnline,
  MdQuestionAnswer,
  MdRealEstateAgent,
  MdWeb,
} from "react-icons/md";
import {
  GiBarbedSpear,
  GiBullets,
  GiClassicalKnowledge,
  GiClick,
  GiCobra,
  GiDistraction,
  GiMultipleTargets,
  GiNightVision,
  GiPlatform,
  GiReactor,
  GiToken,
  GiTopHat,
  GiTorch,
  GiWindyStripes,
} from "react-icons/gi";
import { FaClapperboard, FaFlutter, FaGolang, FaShield } from "react-icons/fa6";

export const PROJECT_TYPES = {
  FRONTEND: "frontend",
  BACKEND: "backend",
  FULLSTACK: "fullstack",
  CLI: "cli",
  MOBILE: "mobile",
  AI_ML: "ai-ml",
  GAME_DEV: "game-dev",
  DEVOPS: "devops",
} as const;

export const projectQuestions: Record<string, QuestionConfig[]> = {
  [PROJECT_TYPES.FRONTEND]: [
    {
      id: "framework",
      label: "Framework",
      type: InputType.SELECT,
      options: [
        { value: "react", label: "React", icon: SiReact },
        { value: "next", label: "Next.js", icon: SiNextdotjs },
        { value: "vue", label: "Vue.js", icon: SiVuedotjs },
        { value: "nuxt", label: "Nuxt.js", icon: SiNuxtdotjs },
        { value: "svelte", label: "Svelte", icon: SiSvelte },
        { value: "angular", label: "Angular", icon: SiAngular },
      ],
      required: true,
    },
    {
      id: "language",
      label: "Language",
      type: InputType.SELECT,
      options: [
        { value: "typescript", label: "TypeScript", icon: SiTypescript },
        { value: "javascript", label: "JavaScript", icon: SiJavascript },
      ],
      required: true,
    },
    {
      id: "styling",
      label: "Styling Solution",
      type: InputType.SELECT,
      options: [
        { value: "tailwind", label: "Tailwind CSS", icon: SiTailwindcss },
        { value: "scss", label: "SCSS", icon: BsFiletypeScss },
        { value: "css-modules", label: "CSS Modules", icon: SiCssmodules },
        {
          value: "styled-components",
          label: "Styled Components",
          icon: SiStyledcomponents,
        },
        { value: "bootstrap", label: "Bootstrap", icon: SiBootstrap },
      ],
      required: true,
    },
    {
      id: "stateManagement",
      label: "State Management",
      type: InputType.SELECT,
      options: [
        { value: "redux", label: "Redux", icon: SiRedux },
        { value: "zustand", label: "Zustand", icon: MdRealEstateAgent },
        { value: "recoil", label: "Recoil", icon: SiRecoil },
        { value: "jotai", label: "Jotai", icon: MdRealEstateAgent },
        { value: "none", label: "None" },
      ],
      required: true,
    },
    {
      id: "authentication",
      label: "Authentication",
      type: InputType.CHECKBOX,
      description: "Include authentication setup",
      required: false,
    },
    {
      id: "testing",
      label: "Testing Framework",
      type: InputType.SELECT,
      options: [
        { value: "jest", label: "Jest", icon: SiJest },
        { value: "vitest", label: "Vitest", icon: SiVitest },
        {
          value: "testing-library",
          label: "React Testing Library",
          icon: GiReactor,
        },
        { value: "cypress", label: "Cypress", icon: SiCypress },
        { value: "none", label: "None" },
      ],
      required: true,
    },
    {
      id: "projectName",
      label: "Project Name",
      type: InputType.TEXT,
      pattern: "^[a-z0-9-_]+$",
      patternError:
        "Only lowercase letters, numbers, hyphens, and underscores allowed",
      required: true,
    },
    {
      id: "packageManager",
      label: "Package Manager",
      type: InputType.SELECT,
      options: [
        { value: "npm", label: "npm", icon: SiNpm },
        { value: "yarn", label: "Yarn", icon: SiYarn },
        { value: "pnpm", label: "pnpm", icon: SiPnpm },
        { value: "bun", label: "Bun", icon: SiBun },
      ],
      required: true,
    },
    {
      id: "routing",
      label: "Routing Solution",
      type: InputType.SELECT,
      options: [
        { value: "react-router", label: "React Router", icon: SiReactrouter },
        {
          value: "tanstack-router",
          label: "TanStack Router",
          icon: SiReactquery,
        },
        { value: "wouter", label: "Wouter", icon: BsRouter },
        { value: "none", label: "None" },
      ],
      required: true,
    },
    {
      id: "uiLibrary",
      label: "UI Component Library",
      type: InputType.SELECT,
      options: [
        { value: "mui", label: "Material-UI", icon: SiMaterialdesign },
        { value: "chakra", label: "Chakra UI", icon: SiChakraui },
        { value: "shadcn", label: "shadcn/ui", icon: SiShadcnui },
        { value: "antd", label: "Ant Design", icon: SiAntdesign },
        { value: "none", label: "None" },
      ],
      required: true,
    },
    {
      id: "formHandling",
      label: "Form Handling",
      type: InputType.SELECT,
      options: [
        {
          value: "react-hook-form",
          label: "React Hook Form",
          icon: SiReacthookform,
        },
        { value: "formik", label: "Formik", icon: SiFormik },
        {
          value: "react-final-form",
          label: "React Final Form",
          icon: FaWpforms,
        },
        { value: "none", label: "None" },
      ],
      required: true,
    },
    {
      id: "analytics",
      label: "Analytics",
      type: InputType.SELECT,
      options: [
        { value: "ga4", label: "Google Analytics 4", icon: SiGoogleanalytics },
        { value: "plausible", label: "Plausible", icon: SiPlausibleanalytics },
        { value: "umami", label: "Umami", icon: SiUmami },
        { value: "none", label: "None" },
      ],
      required: false,
    },
    {
      id: "seo",
      label: "SEO Setup",
      type: InputType.CHECKBOX,
      description: "Include SEO configuration (meta tags, sitemap, robots.txt)",
      required: false,
    },
    {
      id: "i18n",
      label: "Internationalization",
      type: InputType.CHECKBOX,
      description: "Include i18n setup",
      required: false,
    },
    {
      id: "pwa",
      label: "Progressive Web App",
      type: InputType.CHECKBOX,
      description: "Include PWA configuration",
      required: false,
    },
  ],

  [PROJECT_TYPES.BACKEND]: [
    {
      id: "language",
      label: "Language",
      type: InputType.SELECT,
      options: [
        { value: "nodejs", label: "Node.js", icon: SiNodedotjs },
        { value: "python", label: "Python", icon: SiPython },
        { value: "go", label: "Go", icon: SiGo },
        { value: "rust", label: "Rust", icon: SiRust },
        { value: "java", label: "Java", icon: FaJava },
      ],
      required: true,
    },
    {
      id: "framework",
      label: "Framework",
      type: InputType.SELECT,
      options: [
        { value: "express", label: "Express.js", icon: SiExpress },
        { value: "nest", label: "NestJS", icon: SiNestjs },
        { value: "fastify", label: "Fastify", icon: SiFastify },
        { value: "flask", label: "Flask", icon: SiFlask },
        { value: "fastapi", label: "FastAPI", icon: SiFastapi },
        { value: "spring", label: "Spring Boot", icon: SiSpringboot },
      ],
      required: true,
    },
    {
      id: "database",
      label: "Database",
      type: InputType.SELECT,
      options: [
        { value: "postgresql", label: "PostgreSQL", icon: SiPostgresql },
        { value: "mongodb", label: "MongoDB", icon: SiMongodb },
        { value: "mysql", label: "MySQL", icon: SiMysql },
        { value: "redis", label: "Redis", icon: SiRedis },
        { value: "none", label: "None" },
      ],
      required: true,
    },
    {
      id: "orm",
      label: "ORM / Query Builder",
      type: InputType.SELECT,
      options: [
        { value: "prisma", label: "Prisma", icon: SiPrisma },
        { value: "typeorm", label: "TypeORM", icon: SiTypeorm },
        { value: "mongoose", label: "Mongoose", icon: SiMongoose },
        { value: "sequelize", label: "Sequelize", icon: SiSequelize },
        { value: "none", label: "None" },
      ],
      required: true,
    },
    {
      id: "docker",
      label: "Docker Support",
      type: InputType.CHECKBOX,
      description: "Include Dockerfile and docker-compose.yml",
      required: false,
    },
    {
      id: "projectName",
      label: "Project Name",
      type: InputType.TEXT,
      pattern: "^[a-z0-9-_]+$",
      patternError:
        "Only lowercase letters, numbers, hyphens, and underscores allowed",
      required: true,
    },
    {
      id: "apiSpec",
      label: "API Specification",
      type: InputType.SELECT,
      options: [
        { value: "rest", label: "REST", icon: MdWeb },
        { value: "graphql", label: "GraphQL", icon: SiGraphql },
        { value: "grpc", label: "gRPC", icon: GiBarbedSpear },
        { value: "ws", label: "WebSocket", icon: MdWeb },
      ],
      required: true,
    },
    {
      id: "caching",
      label: "Caching Solution",
      type: InputType.SELECT,
      options: [
        { value: "redis", label: "Redis", icon: SiRedis },
        { value: "memcached", label: "Memcached", icon: FaMemory },
        { value: "none", label: "None" },
      ],
      required: false,
    },
    {
      id: "authentication",
      label: "Authentication Method",
      type: InputType.SELECT,
      options: [
        { value: "jwt", label: "JWT", icon: GiToken },
        { value: "session", label: "Session-based", icon: SiSession },
        { value: "Auth0", label: "Auth 0", icon: SiAuth0 },
        { value: "none", label: "None" },
      ],
      required: true,
    },
    {
      id: "messaging",
      label: "Message Queue",
      type: InputType.SELECT,
      options: [
        { value: "rabbitmq", label: "RabbitMQ", icon: SiRabbitmq },
        { value: "kafka", label: "Apache Kafka", icon: SiApachekafka },
        { value: "redis", label: "Redis Pub/Sub", icon: SiRedis },
        { value: "none", label: "None" },
      ],
      required: false,
    },
    {
      id: "monitoring",
      label: "Monitoring Solution",
      type: InputType.SELECT,
      options: [
        {
          value: "prometheus",
          label: "Prometheus + Grafana",
          icon: SiPrometheus,
        },
        { value: "datadog", label: "Datadog", icon: SiDatadog },
        { value: "newrelic", label: "New Relic", icon: SiNewrelic },
        { value: "none", label: "None" },
      ],
      required: false,
    },
    {
      id: "testing",
      label: "Testing Framework",
      type: InputType.SELECT,
      options: [
        { value: "jest", label: "Jest", icon: SiJest },
        { value: "mocha", label: "Mocha", icon: SiMocha },
        { value: "pytest", label: "pytest", icon: SiPytest },
        { value: "golang", label: "Go testing", icon: FaGolang },
      ],
      required: true,
    },
  ],

  [PROJECT_TYPES.FULLSTACK]: [
    {
      id: "projectName",
      label: "Project Name",
      type: InputType.TEXT,
      pattern: "^[a-z0-9-_]+$",
      patternError:
        "Only lowercase letters, numbers, hyphens, and underscores allowed",
      required: true,
    },
    {
      id: "frontendFramework",
      label: "Frontend Framework",
      type: InputType.SELECT,
      options: [
        { value: "next", label: "Next.js", icon: SiNextdotjs },
        { value: "nuxt", label: "Nuxt.js", icon: SiNuxtdotjs },
        { value: "remix", label: "Remix", icon: SiRemix },
        { value: "sveltekit", label: "SvelteKit", icon: SiSvelte },
      ],
      required: true,
    },
    {
      id: "backendFramework",
      label: "Backend Framework",
      type: InputType.SELECT,
      options: [
        { value: "next-api", label: "Next.js API Routes", icon: SiNextdotjs },
        { value: "express", label: "Express.js", icon: SiExpress },
        { value: "nest", label: "NestJS", icon: SiNestjs },
        { value: "fastify", label: "Fastify", icon: SiFastify },
      ],
      required: true,
    },
    {
      id: "database",
      label: "Database",
      type: InputType.SELECT,
      options: [
        { value: "postgresql", label: "PostgreSQL", icon: SiPostgresql },
        { value: "mongodb", label: "MongoDB", icon: SiMongodb },
        { value: "mysql", label: "MySQL", icon: SiMysql },
        { value: "sqlite", label: "SQLite", icon: SiSqlite },
      ],
      required: true,
    },
    {
      id: "orm",
      label: "ORM / Query Builder",
      type: InputType.SELECT,
      options: [
        { value: "prisma", label: "Prisma", icon: SiPrisma },
        { value: "drizzle", label: "Drizzle", icon: SiDrizzle },
        { value: "typeorm", label: "TypeORM", icon: SiTypeorm },
        { value: "mongoose", label: "Mongoose", icon: SiMongoose },
      ],
      required: true,
    },
    {
      id: "authentication",
      label: "Authentication Provider",
      type: InputType.SELECT,
      options: [
        { value: "next-auth", label: "NextAuth.js", icon: SiWebauthn },
        { value: "clerk", label: "Clerk", icon: SiClerk },
        { value: "supabase", label: "Supabase Auth", icon: SiSupabase },
        { value: "firebase", label: "Firebase Auth", icon: SiFirebase },
      ],
      required: true,
    },
    {
      id: "deployment",
      label: "Deployment Platform",
      type: InputType.SELECT,
      options: [
        { value: "vercel", label: "Vercel", icon: SiVercel },
        { value: "railway", label: "Railway", icon: SiRailway },
        { value: "netlify", label: "Netlify", icon: SiNetlify },
        { value: "aws", label: "AWS", icon: SiAwsorganizations },
      ],
      required: true,
    },
  ],

  [PROJECT_TYPES.CLI]: [
    {
      id: "projectName",
      label: "Project Name",
      type: InputType.TEXT,
      pattern: "^[a-z0-9-_]+$",
      patternError:
        "Only lowercase letters, numbers, hyphens, and underscores allowed",
      required: true,
    },
    {
      id: "language",
      label: "Language",
      type: InputType.SELECT,
      options: [
        { value: "nodejs", label: "Node.js", icon: FaNodeJs },
        { value: "python", label: "Python", icon: SiPython },
        { value: "go", label: "Go", icon: FaGolang },
        { value: "rust", label: "Rust", icon: FaRust },
      ],
      required: true,
    },
    {
      id: "argumentParser",
      label: "Argument Parser",
      type: InputType.SELECT,
      options: [
        { value: "commander", label: "Commander.js", icon: BiCommand },
        { value: "yargs", label: "Yargs", icon: SiArcgis },
        { value: "click", label: "Click (Python)", icon: GiClick },
        { value: "cobra", label: "Cobra (Go)", icon: GiCobra },
        { value: "clap", label: "Clap (Rust)", icon: FaClapperboard },
      ],
      required: true,
    },
    {
      id: "interactive",
      label: "Interactive Interface",
      type: InputType.SELECT,
      options: [
        { value: "inquirer", label: "Inquirer.js", icon: BiInfoSquare },
        { value: "prompts", label: "Prompts", icon: TbPrompt },
        {
          value: "questionary",
          label: "Questionary (Python)",
          icon: MdQuestionAnswer,
        },
        { value: "none", label: "None" },
      ],
      required: false,
    },
    {
      id: "logging",
      label: "Logging Solution",
      type: InputType.SELECT,
      options: [
        {
          value: "simple",
          label: "Simple Console Logging",
          icon: SiSimplelogin,
        },
        { value: "winston", label: "Winston", icon: GiWindyStripes },
        { value: "bunyan", label: "Bunyan", icon: BsBuildingExclamation },
        { value: "loguru", label: "Loguru (Python)", icon: TbBrandPython },
      ],
      required: true,
    },
  ],

  [PROJECT_TYPES.MOBILE]: [
    {
      id: "projectName",
      label: "Project Name",
      type: InputType.TEXT,
      pattern: "^[a-z0-9-_]+$",
      patternError:
        "Only lowercase letters, numbers, hyphens, and underscores allowed",
      required: true,
    },
    {
      id: "framework",
      label: "Framework",
      type: InputType.SELECT,
      options: [
        {
          value: "react-native",
          label: "React Native",
          icon: TbBrandReactNative,
        },
        { value: "flutter", label: "Flutter", icon: FaFlutter },
        { value: "ionic", label: "Ionic", icon: SiIonic },
        { value: "kotlin", label: "Native Android (Kotlin)", icon: SiKotlin },
        { value: "swift", label: "Native iOS (Swift)", icon: FaSwift },
      ],
      required: true,
    },
    {
      id: "stateManagement",
      label: "State Management",
      type: InputType.SELECT,
      options: [
        { value: "redux", label: "Redux", icon: SiRedux },
        { value: "mobx", label: "MobX", icon: SiMobx },
        { value: "riverpod", label: "Riverpod (Flutter)", icon: FaFlutter },
        { value: "bloc", label: "BLoC (Flutter)", icon: SiCodeblocks },
      ],
      required: true,
    },
    {
      id: "authentication",
      label: "Authentication",
      type: InputType.SELECT,
      options: [
        { value: "firebase", label: "Firebase Auth", icon: SiFirebase },
        { value: "auth0", label: "Auth0", icon: SiAuth0 },
        { value: "amplify", label: "AWS Amplify", icon: SiAwsamplify },
        { value: "supabase", label: "Supabase Auth", icon: SiSupabase },
      ],
      required: true,
    },
    {
      id: "storage",
      label: "Local Storage",
      type: InputType.SELECT,
      options: [
        { value: "async-storage", label: "Async Storage", icon: FaSync },
        { value: "realm", label: "Realm", icon: SiRealm },
        { value: "sqlite", label: "SQLite", icon: SiSqlite },
        { value: "hive", label: "Hive (Flutter)", icon: FaHive },
      ],
      required: true,
    },
    {
      id: "navigation",
      label: "Navigation Library",
      type: InputType.SELECT,
      options: [
        { value: "react-navigation", label: "React Navigation", icon: FaReact },
        {
          value: "go-router",
          label: "Go Router (Flutter)",
          icon: BiLogoFlutter,
        },
        { value: "ionic-router", label: "Ionic Router", icon: SiIonic },
      ],
      required: true,
    },
  ],

  [PROJECT_TYPES.AI_ML]: [
    {
      id: "projectName",
      label: "Project Name",
      type: InputType.TEXT,
      pattern: "^[a-z0-9-_]+$",
      patternError:
        "Only lowercase letters, numbers, hyphens, and underscores allowed",
      required: true,
    },
    {
      id: "framework",
      label: "ML Framework",
      type: InputType.SELECT,
      options: [
        { value: "tensorflow", label: "TensorFlow", icon: SiTensorflow },
        { value: "pytorch", label: "PyTorch", icon: SiPytorch },
        { value: "scikit", label: "Scikit-learn", icon: SiScikitlearn },
        { value: "jax", label: "JAX", icon: FaBrain },
      ],
      required: true,
    },
    {
      id: "projectType",
      label: "Project Type",
      type: InputType.SELECT,
      options: [
        {
          value: "classification",
          label: "Classification",
          icon: GiClassicalKnowledge,
        },
        { value: "regression", label: "Regression", icon: FaRegAddressBook },
        {
          value: "nlp",
          label: "Natural Language Processing",
          icon: TbLanguage,
        },
        {
          value: "computer-vision",
          label: "Computer Vision",
          icon: GiNightVision,
        },
        {
          value: "reinforcement",
          label: "Reinforcement Learning",
          icon: FaShield,
        },
      ],
      required: true,
    },
    {
      id: "dataProcessing",
      label: "Data Processing Library",
      type: InputType.SELECT,
      options: [
        { value: "pandas", label: "Pandas", icon: SiPandas },
        { value: "dask", label: "Dask", icon: SiDask },
        { value: "spark", label: "PySpark", icon: SiPysyft },
        { value: "numpy", label: "NumPy", icon: SiNumpy },
      ],
      required: true,
    },
    {
      id: "visualization",
      label: "Visualization Library",
      type: InputType.SELECT,
      options: [
        // ... (previous code remains the same until AI_ML visualization options)

        { value: "matplotlib", label: "Matplotlib", icon: SiMetasploit },
        { value: "plotly", label: "Plotly", icon: SiPlotly },
        { value: "seaborn", label: "Seaborn", icon: SiMetabase },
        { value: "bokeh", label: "Bokeh", icon: BiBookHeart },
      ],
      required: true,
    },
    {
      id: "modelTracking",
      label: "Model Tracking",
      type: InputType.SELECT,
      options: [
        { value: "mlflow", label: "MLflow", icon: SiMlflow },
        { value: "wandb", label: "Weights & Biases", icon: FaWeight },
        { value: "tensorboard", label: "TensorBoard", icon: SiTensorflow },
        { value: "neptune", label: "Neptune.ai", icon: SiNeptune },
      ],
      required: false,
    },
    {
      id: "deployment",
      label: "Model Deployment",
      type: InputType.SELECT,
      options: [
        { value: "flask", label: "Flask API", icon: FaFlask },
        { value: "fastapi", label: "FastAPI", icon: SiFastapi },
        {
          value: "tensorflow-serving",
          label: "TensorFlow Serving",
          icon: SiTensorflow,
        },
        { value: "torchserve", label: "TorchServe", icon: GiTorch },
      ],
      required: true,
    },
    {
      id: "gpuSupport",
      label: "GPU Support",
      type: InputType.CHECKBOX,
      description: "Include GPU acceleration setup",
      required: false,
    },
    {
      id: "experimentTracking",
      label: "Experiment Tracking",
      type: InputType.CHECKBOX,
      description: "Include experiment tracking setup",
      required: false,
    },
  ],

  [PROJECT_TYPES.GAME_DEV]: [
    {
      id: "projectName",
      label: "Project Name",
      type: InputType.TEXT,
      pattern: "^[a-z0-9-_]+$",
      patternError:
        "Only lowercase letters, numbers, hyphens, and underscores allowed",
      required: true,
    },
    {
      id: "engine",
      label: "Game Engine",
      type: InputType.SELECT,
      options: [
        { value: "unity", label: "Unity", icon: FaUnity },
        { value: "unreal", label: "Unreal Engine", icon: SiUnrealengine },
        { value: "godot", label: "Godot", icon: GoDot },
        { value: "phaser", label: "Phaser.js", icon: GiTopHat },
        { value: "babylonjs", label: "Babylon.js", icon: SiBabylondotjs },
      ],
      required: true,
    },
    {
      id: "dimension",
      label: "Dimension",
      type: InputType.SELECT,
      options: [
        { value: "2d", label: "2D", icon: FaDraft2Digital },
        { value: "3d", label: "3D", icon: BsBadge3dFill },
        { value: "2.5d", label: "2.5D", icon: FaDraft2Digital },
      ],
      required: true,
    },
    {
      id: "genre",
      label: "Game Genre",
      type: InputType.SELECT,
      options: [
        { value: "action", label: "Action", icon: FaAcquisitionsIncorporated },
        { value: "platformer", label: "Platformer", icon: GiPlatform },
        { value: "rpg", label: "RPG", icon: RiGpsFill },
        { value: "strategy", label: "Strategy", icon: SiMicrostrategy },
        { value: "puzzle", label: "Puzzle", icon: FaPuzzlePiece },
      ],
      required: true,
    },
    {
      id: "multiplayer",
      label: "Multiplayer Support",
      type: InputType.SELECT,
      options: [
        { value: "none", label: "Single Player Only", icon: GoSingleSelect },
        { value: "local", label: "Local Multiplayer", icon: SiLocal },
        {
          value: "online",
          label: "Online Multiplayer",
          icon: GiMultipleTargets,
        },
        { value: "both", label: "Both Local & Online", icon: MdBookOnline },
      ],
      required: true,
    },
    {
      id: "physics",
      label: "Physics Engine",
      type: InputType.SELECT,
      options: [
        {
          value: "built-in",
          label: "Built-in Physics",
          icon: TbPhysotherapist,
        },
        { value: "box2d", label: "Box2D", icon: BsBox2 },
        { value: "bullet", label: "Bullet Physics", icon: GiBullets },
        { value: "physx", label: "PhysX", icon: GiDistraction },
      ],
      required: true,
    },
    {
      id: "assetManagement",
      label: "Asset Management",
      type: InputType.CHECKBOX,
      description: "Include asset management system setup",
      required: false,
    },
    {
      id: "saveSystem",
      label: "Save System",
      type: InputType.CHECKBOX,
      description: "Include save/load system setup",
      required: false,
    },
  ],

  [PROJECT_TYPES.DEVOPS]: [
    {
      id: "projectName",
      label: "Project Name",
      type: InputType.TEXT,
      pattern: "^[a-z0-9-_]+$",
      patternError:
        "Only lowercase letters, numbers, hyphens, and underscores allowed",
      required: true,
    },
    {
      id: "infrastructure",
      label: "Infrastructure as Code",
      type: InputType.SELECT,
      options: [
        { value: "terraform", label: "Terraform", icon: SiTerraform },
        { value: "cloudformation", label: "AWS CloudFormation", icon: FaAws },
        { value: "pulumi", label: "Pulumi", icon: SiPulumi },
        { value: "bicep", label: "Azure Bicep", icon: VscAzure },
      ],
      required: true,
    },
    {
      id: "cloudProvider",
      label: "Cloud Provider",
      type: InputType.SELECT,
      options: [
        {
          value: "aws",
          label: "Amazon Web Services",
          icon: SiAwsorganizations,
        },
        { value: "azure", label: "Microsoft Azure", icon: BsMicrosoft },
        { value: "gcp", label: "Google Cloud Platform", icon: SiGooglecloud },
        { value: "multi", label: "Multi-Cloud", icon: BsCloudArrowUp },
      ],
      required: true,
    },
    {
      id: "containerization",
      label: "Containerization",
      type: InputType.SELECT,
      options: [
        { value: "docker", label: "Docker", icon: FaDocker },
        { value: "containerd", label: "containerd", icon: SiContainerd },
        { value: "podman", label: "Podman", icon: SiPodman },
        { value: "none", label: "None" },
      ],
      required: true,
    },
    {
      id: "orchestration",
      label: "Container Orchestration",
      type: InputType.SELECT,
      options: [
        { value: "kubernetes", label: "Kubernetes", icon: SiKubernetes },
        { value: "ecs", label: "AWS ECS", icon: FaAws },
        { value: "nomad", label: "HashiCorp Nomad", icon: SiHashicorp },
        { value: "none", label: "None" },
      ],
      required: true,
    },
    {
      id: "cicd",
      label: "CI/CD Platform",
      type: InputType.SELECT,
      options: [
        { value: "github-actions", label: "GitHub Actions", icon: FaGithub },
        { value: "gitlab-ci", label: "GitLab CI", icon: FaGitlab },
        { value: "jenkins", label: "Jenkins", icon: FaJenkins },
        { value: "azure-devops", label: "Azure DevOps", icon: VscAzureDevops },
      ],
      required: true,
    },
    {
      id: "monitoring",
      label: "Monitoring Stack",
      type: InputType.SELECT,
      options: [
        {
          value: "prometheus-grafana",
          label: "Prometheus + Grafana",
          icon: SiPrometheus,
        },
        { value: "elk", label: "ELK Stack", icon: FaExternalLinkSquareAlt },
        { value: "datadog", label: "Datadog", icon: SiDatadog },
        { value: "newrelic", label: "New Relic", icon: SiNewrelic },
      ],
      required: true,
    },
    {
      id: "security",
      label: "Security Tools",
      type: InputType.SELECT,
      options: [
        { value: "vault", label: "HashiCorp Vault", icon: SiHashicorp },
        { value: "snyk", label: "Snyk", icon: SiSnyk },
        { value: "trivy", label: "Trivy", icon: SiTrivy },
        { value: "none", label: "None" },
      ],
      required: false,
    },
    {
      id: "serviceDiscovery",
      label: "Service Discovery",
      type: InputType.SELECT,
      options: [
        { value: "consul", label: "HashiCorp Consul", icon: SiHashicorp },
        { value: "etcd", label: "etcd", icon: SiEtcd },
        { value: "eureka", label: "Netflix Eureka", icon: SiNetflix },
        { value: "none", label: "None" },
      ],
      required: false,
    },
    {
      id: "backup",
      label: "Backup Strategy",
      type: InputType.CHECKBOX,
      description: "Include backup and disaster recovery setup",
      required: false,
    },
    {
      id: "compliance",
      label: "Compliance Checks",
      type: InputType.CHECKBOX,
      description: "Include compliance and policy as code setup",
      required: false,
    },
  ],
};
